// Objective-C API for talking to github.com/ftauth/sdk-go/mobile Go package.
//   gobind -lang=objc github.com/ftauth/sdk-go/mobile
//
// File is generated by gobind. Do not edit.

#ifndef __Ftauthinternal_H__
#define __Ftauthinternal_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class FtauthinternalAuthorizationCodeResponse;
@class FtauthinternalCertificateRepository;
@class FtauthinternalClient;
@class FtauthinternalClientConfig;
@class FtauthinternalConfig;
@class FtauthinternalRequest;
@class FtauthinternalResponse;
@class FtauthinternalSecurityConfiguration;
@class FtauthinternalSignInWithAppleData;
@class FtauthinternalUserData;
@protocol FtauthinternalAuthorizationCodeCompleter;
@class FtauthinternalAuthorizationCodeCompleter;
@protocol FtauthinternalErrorCompleter;
@class FtauthinternalErrorCompleter;
@protocol FtauthinternalKeyStore;
@class FtauthinternalKeyStore;
@protocol FtauthinternalLogger;
@class FtauthinternalLogger;
@protocol FtauthinternalLoginCompleter;
@class FtauthinternalLoginCompleter;
@protocol FtauthinternalSignInWithApple;
@class FtauthinternalSignInWithApple;
@protocol FtauthinternalWebViewLauncher;
@class FtauthinternalWebViewLauncher;

@protocol FtauthinternalAuthorizationCodeCompleter <NSObject>
- (void)complete:(FtauthinternalAuthorizationCodeResponse* _Nullable)authResp err:(NSError* _Nullable)err;
@end

@protocol FtauthinternalErrorCompleter <NSObject>
- (void)complete:(NSError* _Nullable)err;
@end

@protocol FtauthinternalKeyStore <NSObject>
- (BOOL)clear:(NSError* _Nullable* _Nullable)error;
- (BOOL)delete:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)get:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
- (BOOL)save:(NSString* _Nullable)key value:(NSData* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
@end

@protocol FtauthinternalLogger <NSObject>
- (void)debug:(NSString* _Nullable)log;
- (void)error:(NSString* _Nullable)log;
- (void)info:(NSString* _Nullable)log;
- (void)warn:(NSString* _Nullable)log;
@end

@protocol FtauthinternalLoginCompleter <NSObject>
- (void)complete:(FtauthinternalUserData* _Nullable)user err:(NSError* _Nullable)err;
@end

@protocol FtauthinternalSignInWithApple <NSObject>
- (FtauthinternalUserData* _Nullable)signInWithApple:(FtauthinternalSignInWithAppleData* _Nullable)user error:(NSError* _Nullable* _Nullable)error;
@end

@protocol FtauthinternalWebViewLauncher <NSObject>
- (void)launchURL:(NSString* _Nullable)url completer:(id<FtauthinternalAuthorizationCodeCompleter> _Nullable)completer;
@end

/**
 * AuthorizationCodeResponse holds the query parameters returned
from a successful Authorize call, as well as an error if any
error occurred.
 */
@interface FtauthinternalAuthorizationCodeResponse : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAuthorizationCodeResponse creates a new authorization code response with
the query parameters of a successful callback.
 */
- (nullable instancetype)init:(NSString* _Nullable)code state:(NSString* _Nullable)state err:(NSError* _Nullable)err;
@property (nonatomic) NSString* _Nonnull code;
@property (nonatomic) NSString* _Nonnull state;
@property (nonatomic) NSError* _Nullable error;
@end

/**
 * CertificateRepository holds a map of hosts to certificate pools
for use with TLS handshake verification (i.e. certificate pinning).
 */
@interface FtauthinternalCertificateRepository : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * AddSecurityConfiguration configures the TLS client for request to the specified host.
 */
- (void)addSecurityConfiguration:(FtauthinternalSecurityConfiguration* _Nullable)sc;
/**
 * GetDefaultConfiguration returns the default security configuration, i.e. the configuration
used when a server's configuration has not been explicitly set.
 */
- (FtauthinternalSecurityConfiguration* _Nullable)getDefaultConfiguration;
/**
 * GetSecurityConfiguration returns the stored configuration for the given host, returning
nil if not found.
 */
- (FtauthinternalSecurityConfiguration* _Nullable)getSecurityConfiguration:(NSString* _Nullable)host;
/**
 * RemoveSecurityConfiguration resets the security configuration for the host, using
the default security configuration instead.
 */
- (void)removeSecurityConfiguration:(NSString* _Nullable)host;
/**
 * SetDefaultConfiguration sets the default security configuration, i.e. the configuration
used when a server's configuration has not been explicitly set.
 */
- (void)setDefaultConfiguration:(FtauthinternalSecurityConfiguration* _Nullable)sc;
@end

/**
 * Client communicates with HTTP services on behalf
of an authenticated user.
 */
@interface FtauthinternalClient : NSObject <goSeqRefInterface, FtauthinternalAuthorizationCodeCompleter, FtauthinternalLogger, FtauthinternalSignInWithApple> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewClient creates a new FTAuth client
 */
- (nullable instancetype)init:(FtauthinternalConfig* _Nullable)config;
// skipped field Client.Client with unsupported type: *github.com/ftauth/sdk-go.Client

// skipped method Client.Authorize with unsupported parameter or return types

/**
 * Complete handles completion of an authorization code request.
 */
- (void)complete:(FtauthinternalAuthorizationCodeResponse* _Nullable)authResp err:(NSError* _Nullable)err;
// skipped method Client.Configure with unsupported parameter or return types

// skipped method Client.CurrentUser with unsupported parameter or return types

- (void)debug:(NSString* _Nullable)log;
// skipped method Client.Debugf with unsupported parameter or return types

// skipped method Client.Debugln with unsupported parameter or return types

// skipped method Client.DefaultAuthorizer with unsupported parameter or return types

- (void)error:(NSString* _Nullable)log;
// skipped method Client.Errorf with unsupported parameter or return types

// skipped method Client.Errorln with unsupported parameter or return types

// skipped method Client.Exchange with unsupported parameter or return types

- (void)info:(NSString* _Nullable)log;
// skipped method Client.Infof with unsupported parameter or return types

// skipped method Client.Infoln with unsupported parameter or return types

- (BOOL)initialize:(NSError* _Nullable* _Nullable)error;
- (BOOL)isAuthenticated;
- (void)lock;
/**
 * Login triggers the authentication flow and handles redirects
on the mobile side to return an authenticated HTTP client.
 */
- (void)login:(long)provider webView:(id<FtauthinternalWebViewLauncher> _Nullable)webView completion:(id<FtauthinternalLoginCompleter> _Nullable)completion;
- (void)rLock;
// skipped method Client.RLocker with unsupported parameter or return types

- (void)rUnlock;
/**
 * Request performs an HTTP request on behalf of an authenticated user.
 */
- (FtauthinternalResponse* _Nullable)request:(FtauthinternalRequest* _Nullable)request error:(NSError* _Nullable* _Nullable)error;
- (BOOL)saveTokens:(NSString* _Nullable)accessTokenJWT refreshTokenJWT:(NSString* _Nullable)refreshTokenJWT error:(NSError* _Nullable* _Nullable)error;
// skipped method Client.SetHTTPClient with unsupported parameter or return types

/**
 * SignInWithApple is a special login function for working with Apple's login system on iOS 13.
iOS 12 and all other providers use the Login function with the provider specified.
 */
- (FtauthinternalUserData* _Nullable)signInWithApple:(FtauthinternalSignInWithAppleData* _Nullable)user error:(NSError* _Nullable* _Nullable)error;
// skipped method Client.Token with unsupported parameter or return types

- (void)unlock;
- (void)warn:(NSString* _Nullable)log;
// skipped method Client.Warnf with unsupported parameter or return types

// skipped method Client.Warnln with unsupported parameter or return types

@end

/**
 * ClientConfig holds client options and settings.
 */
@interface FtauthinternalClientConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewClientConfig creates a new object holding all the information
needed to initialize an FTAuth client.
 */
- (nullable instancetype)init:(NSString* _Nullable)gatewayURL clientID:(NSString* _Nullable)clientID clientSecret:(NSString* _Nullable)clientSecret clientType:(NSString* _Nullable)clientType redirectURI:(NSString* _Nullable)redirectURI scope:(NSString* _Nullable)scope timeout:(long)timeout;
@property (nonatomic) NSString* _Nonnull gatewayURL;
@property (nonatomic) NSString* _Nonnull clientID;
@property (nonatomic) NSString* _Nonnull clientSecret;
// skipped field ClientConfig.ClientType with unsupported type: github.com/ftauth/ftauth/pkg/model.ClientType

@property (nonatomic) NSString* _Nonnull redirectURI;
// skipped field ClientConfig.Scopes with unsupported type: []string

// skipped field ClientConfig.Timeout with unsupported type: uint

@end

/**
 * Config holds options for configuring the client.
Use DefaultOptions if unsure.
 */
@interface FtauthinternalConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewConfig creates an options object for configuring
an FTAuth client.
 */
- (nullable instancetype)init:(id<FtauthinternalKeyStore> _Nullable)keyStore logger:(id<FtauthinternalLogger> _Nullable)logger clientConfig:(FtauthinternalClientConfig* _Nullable)clientConfig;
/**
 * NewConfigWithJSON creates an options object for configuring
an FTAuth client with client config in JSON format.
 */
- (nullable instancetype)initWithJSON:(id<FtauthinternalKeyStore> _Nullable)keyStore logger:(id<FtauthinternalLogger> _Nullable)logger clientConfigJSON:(NSData* _Nullable)clientConfigJSON;
// skipped field Config.KeyStore with unsupported type: github.com/ftauth/sdk-go.KeyStore

// skipped field Config.Logger with unsupported type: *github.com/ftauth/sdk-go.LoggerExt

// skipped field Config.ClientConfig with unsupported type: *github.com/ftauth/sdk-go.ClientConfig

/**
 * GetClientConfig returns the configured client options.
 */
- (FtauthinternalClientConfig* _Nullable)getClientConfig;
@end

/**
 * Request holds an HTTP request.
 */
@interface FtauthinternalRequest : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewRequest creates a new HTTP request
 */
- (nullable instancetype)init:(NSString* _Nullable)method uri:(NSString* _Nullable)uri body:(NSData* _Nullable)body;
@property (nonatomic) NSString* _Nonnull method;
@property (nonatomic) NSString* _Nonnull url;
@property (nonatomic) NSData* _Nullable body;
@property (nonatomic) BOOL public;
@end

/**
 * Response holds an HTTP response.
 */
@interface FtauthinternalResponse : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) FtauthinternalRequest* _Nullable request;
@property (nonatomic) long statusCode;
@property (nonatomic) NSData* _Nullable body;
@end

/**
 * SecurityConfiguration holds a host-specific configuration for the
rules to use when verifying a TLS handshake.
 */
@interface FtauthinternalSecurityConfiguration : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewSecurityConfiguration creates a new configuration object for the given host.
Must call CertficateRepository.AddSecurityConfiguration() for it to take effect.
 */
- (nullable instancetype)init:(NSString* _Nullable)host trustPublicPKI:(BOOL)trustPublicPKI;
@property (nonatomic) NSString* _Nonnull host;
@property (nonatomic) BOOL trustPublicPKI;
/**
 * AddIntermediateASN1 pins the intermediate certificate (in ASN1 DER format),
adding it to the list of verified certificates for the host in this
configuration.
 */
- (BOOL)addIntermediateASN1:(NSData* _Nullable)asn1 error:(NSError* _Nullable* _Nullable)error;
/**
 * AddIntermediatePEM pins the intermediate certificate(s) (in PEM format),
adding them to the list of verified certificates for the host in this
configuration.
 */
- (BOOL)addIntermediatePEM:(NSData* _Nullable)pem error:(NSError* _Nullable* _Nullable)error;
/**
 * ResetPinning removes all intermediate certs and resets TrustSystemRoots to true.
 */
- (void)resetPinning;
@end

/**
 * SignInWithAppleData holds the data we can expect to receive back from iOS
after a successful login call, broken out by credential type.
 */
@interface FtauthinternalSignInWithAppleData : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped field SignInWithAppleData.CredentialType with unsupported type: github.com/ftauth/sdk-go/mobile.AppleCredentialType

/**
 * AppleCredentialTypeAppleID
 */
@property (nonatomic) NSString* _Nonnull userID;
@property (nonatomic) NSData* _Nullable authCode;
// skipped field SignInWithAppleData.Scopes with unsupported type: []string

@property (nonatomic) NSData* _Nullable idToken;
@property (nonatomic) NSString* _Nonnull email;
@property (nonatomic) NSString* _Nonnull firstName;
@property (nonatomic) NSString* _Nonnull lastName;
@property (nonatomic) long realUserStatus;
/**
 * AppleCredentialTypePassword
 */
@property (nonatomic) NSString* _Nonnull username;
@property (nonatomic) NSString* _Nonnull password;
/**
 * Valid returns whether or not the data is valid, for ensuring
we receive valid data from the mobile side.
 */
- (BOOL)valid:(NSError* _Nullable* _Nullable)error;
@end

/**
 * UserData holds the key user data for sharing externally.
 */
@interface FtauthinternalUserData : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull id_;
@property (nonatomic) NSString* _Nonnull clientID;
@property (nonatomic) NSString* _Nonnull username;
@property (nonatomic) NSString* _Nonnull firstName;
@property (nonatomic) NSString* _Nonnull lastName;
@property (nonatomic) NSString* _Nonnull email;
@property (nonatomic) NSString* _Nonnull phoneNumber;
// skipped field UserData.Scopes with unsupported type: []*github.com/ftauth/ftauth/pkg/model.Scope

// skipped field UserData.ProviderData with unsupported type: []github.com/ftauth/ftauth/pkg/model.ProviderData

@end

// skipped const AppleCredentialTypeAppleID with unsupported type: github.com/ftauth/sdk-go/mobile.AppleCredentialType

// skipped const AppleCredentialTypePassword with unsupported type: github.com/ftauth/sdk-go/mobile.AppleCredentialType


@interface Ftauthinternal : NSObject
/**
 * Common errors.
 */
+ (NSError* _Nullable) errInvalidState;
+ (void) setErrInvalidState:(NSError* _Nullable)v;

@end

/**
 * ErrAccess creates an access error.
 */
FOUNDATION_EXPORT BOOL FtauthinternalErrAccess(NSString* _Nullable details, NSError* _Nullable* _Nullable error);

/**
 * ErrKeyNotFound creates a key not found error.
 */
FOUNDATION_EXPORT BOOL FtauthinternalErrKeyNotFound(NSString* _Nullable key, NSError* _Nullable* _Nullable error);

/**
 * ErrUnknown creates an unknown error.
 */
FOUNDATION_EXPORT BOOL FtauthinternalErrUnknown(NSString* _Nullable details, NSError* _Nullable* _Nullable error);

/**
 * GetCertificateRepository returns the main certificate repo for adding/removing
security configurations.
 */
FOUNDATION_EXPORT FtauthinternalCertificateRepository* _Nullable FtauthinternalGetCertificateRepository(void);

/**
 * NewAuthorizationCodeResponse creates a new authorization code response with
the query parameters of a successful callback.
 */
FOUNDATION_EXPORT FtauthinternalAuthorizationCodeResponse* _Nullable FtauthinternalNewAuthorizationCodeResponse(NSString* _Nullable code, NSString* _Nullable state, NSError* _Nullable err);

/**
 * NewClient creates a new FTAuth client
 */
FOUNDATION_EXPORT FtauthinternalClient* _Nullable FtauthinternalNewClient(FtauthinternalConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * NewClientConfig creates a new object holding all the information
needed to initialize an FTAuth client.
 */
FOUNDATION_EXPORT FtauthinternalClientConfig* _Nullable FtauthinternalNewClientConfig(NSString* _Nullable gatewayURL, NSString* _Nullable clientID, NSString* _Nullable clientSecret, NSString* _Nullable clientType, NSString* _Nullable redirectURI, NSString* _Nullable scope, long timeout, NSError* _Nullable* _Nullable error);

/**
 * NewConfig creates an options object for configuring
an FTAuth client.
 */
FOUNDATION_EXPORT FtauthinternalConfig* _Nullable FtauthinternalNewConfig(id<FtauthinternalKeyStore> _Nullable keyStore, id<FtauthinternalLogger> _Nullable logger, FtauthinternalClientConfig* _Nullable clientConfig, NSError* _Nullable* _Nullable error);

/**
 * NewConfigWithJSON creates an options object for configuring
an FTAuth client with client config in JSON format.
 */
FOUNDATION_EXPORT FtauthinternalConfig* _Nullable FtauthinternalNewConfigWithJSON(id<FtauthinternalKeyStore> _Nullable keyStore, id<FtauthinternalLogger> _Nullable logger, NSData* _Nullable clientConfigJSON, NSError* _Nullable* _Nullable error);

/**
 * NewRequest creates a new HTTP request
 */
FOUNDATION_EXPORT FtauthinternalRequest* _Nullable FtauthinternalNewRequest(NSString* _Nullable method, NSString* _Nullable uri, NSData* _Nullable body);

/**
 * NewSecurityConfiguration creates a new configuration object for the given host.
Must call CertficateRepository.AddSecurityConfiguration() for it to take effect.
 */
FOUNDATION_EXPORT FtauthinternalSecurityConfiguration* _Nullable FtauthinternalNewSecurityConfiguration(NSString* _Nullable host, BOOL trustPublicPKI);

/**
 * NewSignInWithAppleIDData returns a data object for the Apple ID flow.
 */
FOUNDATION_EXPORT FtauthinternalSignInWithAppleData* _Nullable FtauthinternalNewSignInWithAppleIDData(NSString* _Nullable UserID, NSData* _Nullable AuthCode, NSString* _Nullable Scopes, NSData* _Nullable IDToken, NSString* _Nullable Email, NSString* _Nullable FirstName, NSString* _Nullable LastName, long RealUserStatus);

/**
 * NewSignInWithApplePasswordData returns a data object for the password flow.
 */
FOUNDATION_EXPORT FtauthinternalSignInWithAppleData* _Nullable FtauthinternalNewSignInWithApplePasswordData(NSString* _Nullable username, NSString* _Nullable password);

@class FtauthinternalAuthorizationCodeCompleter;

@class FtauthinternalErrorCompleter;

@class FtauthinternalKeyStore;

@class FtauthinternalLogger;

@class FtauthinternalLoginCompleter;

@class FtauthinternalSignInWithApple;

@class FtauthinternalWebViewLauncher;

/**
 * AuthorizationCodeCompleter handles client-side asynchronous
completion of an authorization request.
 */
@interface FtauthinternalAuthorizationCodeCompleter : NSObject <goSeqRefInterface, FtauthinternalAuthorizationCodeCompleter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)complete:(FtauthinternalAuthorizationCodeResponse* _Nullable)authResp err:(NSError* _Nullable)err;
@end

/**
 * ErrorCompleter completes with an error (or nil).
 */
@interface FtauthinternalErrorCompleter : NSObject <goSeqRefInterface, FtauthinternalErrorCompleter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)complete:(NSError* _Nullable)err;
@end

/**
 * KeyStore exchanges private key data with a backend keychain.
Implementations will vary by client, but all should be encrypted
or reasonably protected against attacks.
 */
@interface FtauthinternalKeyStore : NSObject <goSeqRefInterface, FtauthinternalKeyStore> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (BOOL)clear:(NSError* _Nullable* _Nullable)error;
- (BOOL)delete:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
- (NSData* _Nullable)get:(NSString* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
- (BOOL)save:(NSString* _Nullable)key value:(NSData* _Nullable)value error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Logger lets the mobile platform define the logging interface.
 */
@interface FtauthinternalLogger : NSObject <goSeqRefInterface, FtauthinternalLogger> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)debug:(NSString* _Nullable)log;
- (void)error:(NSString* _Nullable)log;
- (void)info:(NSString* _Nullable)log;
- (void)warn:(NSString* _Nullable)log;
@end

/**
 * LoginCompleter can be used by the mobile side to receive
a notification when the login process completed successfully
(with a username), or with an error.
 */
@interface FtauthinternalLoginCompleter : NSObject <goSeqRefInterface, FtauthinternalLoginCompleter> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)complete:(FtauthinternalUserData* _Nullable)user err:(NSError* _Nullable)err;
@end

/**
 * SignInWithApple is the callback for the iOS13+ Sign In With Apple flow.
Basically, it's the reverse of the typical flow, since the OAuth flow
is handled by Apple, then we store a copy of the information on our end
and convert it into a UserData object via the server.
 */
@interface FtauthinternalSignInWithApple : NSObject <goSeqRefInterface, FtauthinternalSignInWithApple> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (FtauthinternalUserData* _Nullable)signInWithApple:(FtauthinternalSignInWithAppleData* _Nullable)user error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * WebViewLauncher handles opening URLs on mobile/desktop clients.
 */
@interface FtauthinternalWebViewLauncher : NSObject <goSeqRefInterface, FtauthinternalWebViewLauncher> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)launchURL:(NSString* _Nullable)url completer:(id<FtauthinternalAuthorizationCodeCompleter> _Nullable)completer;
@end

#endif
